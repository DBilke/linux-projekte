#include "main.h"

void finish_with_error(MYSQL *con)
{
  fprintf(stderr, "%s\n", mysql_error(con));
  mysql_close(con);
  exit(1);
}

int main(int argc, char **argv)
{

  // SET UP SERVER DATABASE
  system("mysql --host=localhost --user=root --password=root --database=test -e \"source /home/dbilke/server_init.sql;\"");

  MYSQL *con = mysql_init(NULL);

  // CONNECT AND SET UP TABLE
  if (con == NULL)
  {
      fprintf(stderr, "mysql_init() failed\n");
      exit(1);
  }

  if (mysql_real_connect(con, "localhost", "server", "server",
          "server", 0, NULL, 0) == NULL)
  {
      finish_with_error(con);
  }

  char *sql = "CREATE TABLE IF NOT EXISTS server(Id INT PRIMARY KEY AUTO_INCREMENT, IP VARCHAR(15))";

  if (mysql_query(con, sql))
  {
      finish_with_error(con);
  }

  if (mysql_query(con, "INSERT INTO server(IP) VALUES('127.0.0.1')"))
  {
      finish_with_error(con);
  }

  if (mysql_query(con, "INSERT INTO server(IP) VALUES('127.0.0.1')"))
  {
      finish_with_error(con);
  }

  int id = mysql_insert_id(con);

  printf("The last inserted row id is: %d\n", id);

  mysql_close(con);



  // Handle client messages
  if (mysql_real_connect(con, "localhost", "server", "server",
          "clients", 0, NULL, 0) == NULL)
  {
      finish_with_error(con);
  }

  //GET client1 messages
  printf("\n\nMESSAGES FROM CLIENT1:\n");

  if (mysql_query(con, "SELECT * FROM Client1"))
   {
       finish_with_error(con);
   }

   MYSQL_RES *result1 = mysql_store_result(con);

   if (result1 == NULL)
   {
       finish_with_error(con);
   }

   int num_fields1 = mysql_num_fields(result1);

   MYSQL_ROW row1;

   while ((row1 = mysql_fetch_row(result1)))
   {
       for(int i = 0; i < num_fields1; i++)
       {
           printf("%s ", row1[i] ? row1[i] : "NULL");
       }
           printf("\n");
   }
   mysql_free_result(result1);



   //GET client2 messages
   printf("\n\nMESSAGES FROM CLIENT2:\n");

   if (mysql_query(con, "SELECT * FROM Client2"))
    {
        finish_with_error(con);
    }

    MYSQL_RES *result2 = mysql_store_result(con);

    if (result2 == NULL)
    {
        finish_with_error(con);
    }

    int num_fields2 = mysql_num_fields(result2);

    MYSQL_ROW row2;

    while ((row2 = mysql_fetch_row(result2)))
    {
        for(int i = 0; i < num_fields2; i++)
        {
            printf("%s ", row2[i] ? row2[i] : "NULL");
        }
            printf("\n");
    }

   mysql_free_result(result2);
   mysql_close(con);
  exit(0);
}
